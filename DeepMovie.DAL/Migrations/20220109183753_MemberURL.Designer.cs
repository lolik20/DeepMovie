// <auto-generated />
using System;
using DeepMovie.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DeepMovie.DAL.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220109183753_MemberURL")]
    partial class MemberURL
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("DeepMovie.Common.Entities.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("DeepMovie.Common.Entities.Content", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ContentType")
                        .HasColumnType("integer");

                    b.Property<int?>("FilmID")
                        .HasColumnType("integer");

                    b.Property<int?>("MemberID")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<string>("URL")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("FilmID");

                    b.HasIndex("MemberID");

                    b.ToTable("Content");
                });

            modelBuilder.Entity("DeepMovie.Common.Entities.DonationStage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("FilmID")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("FilmID");

                    b.ToTable("DonationStages");
                });

            modelBuilder.Entity("DeepMovie.Common.Entities.Film", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AgeRating")
                        .HasColumnType("integer");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Format")
                        .HasColumnType("text");

                    b.Property<decimal>("FundRaised")
                        .HasColumnType("numeric");

                    b.Property<decimal>("FundTotal")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsImmersive")
                        .HasColumnType("boolean");

                    b.Property<int>("Minutes")
                        .HasColumnType("integer");

                    b.Property<int>("RussiaFees")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RussiaPremiere")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Sound")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int>("TotalBudget")
                        .HasColumnType("integer");

                    b.Property<int>("TotalFees")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TotalPremiere")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("USAFees")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.ToTable("Films");
                });

            modelBuilder.Entity("DeepMovie.Common.Entities.FilmCategory", b =>
                {
                    b.Property<int>("FilmID")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryID")
                        .HasColumnType("integer");

                    b.HasKey("FilmID", "CategoryID");

                    b.HasIndex("CategoryID");

                    b.ToTable("FilmCategories");
                });

            modelBuilder.Entity("DeepMovie.Common.Entities.FilmMember", b =>
                {
                    b.Property<int>("FilmID")
                        .HasColumnType("integer");

                    b.Property<int>("MemberID")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("MemberRole")
                        .HasColumnType("integer");

                    b.HasKey("FilmID", "MemberID");

                    b.HasIndex("MemberID");

                    b.ToTable("FilmMember");
                });

            modelBuilder.Entity("DeepMovie.Common.Entities.Link", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("FilmID")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("URL")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("FilmID");

                    b.ToTable("Link");
                });

            modelBuilder.Entity("DeepMovie.Common.Entities.Member", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.Property<int?>("PhotoID")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<string>("URL")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("PhotoID");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("DeepMovie.Common.Entities.Review", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("FilmID")
                        .HasColumnType("integer");

                    b.Property<int>("ImageID")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.Property<string>("Link")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("FilmID");

                    b.HasIndex("ImageID");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("DeepMovie.Common.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FacebookID")
                        .HasColumnType("text");

                    b.Property<string>("GoogleID")
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("VkID")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DeepMovie.Common.Entities.Content", b =>
                {
                    b.HasOne("DeepMovie.Common.Entities.Film", "Film")
                        .WithMany("Contents")
                        .HasForeignKey("FilmID");

                    b.HasOne("DeepMovie.Common.Entities.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberID");
                });

            modelBuilder.Entity("DeepMovie.Common.Entities.DonationStage", b =>
                {
                    b.HasOne("DeepMovie.Common.Entities.Film", "Film")
                        .WithMany("DonationStages")
                        .HasForeignKey("FilmID");
                });

            modelBuilder.Entity("DeepMovie.Common.Entities.FilmCategory", b =>
                {
                    b.HasOne("DeepMovie.Common.Entities.Category", "Category")
                        .WithMany("FilmCategories")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeepMovie.Common.Entities.Film", "Film")
                        .WithMany("FilmCategories")
                        .HasForeignKey("FilmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeepMovie.Common.Entities.FilmMember", b =>
                {
                    b.HasOne("DeepMovie.Common.Entities.Film", "Film")
                        .WithMany("FilmMembers")
                        .HasForeignKey("FilmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeepMovie.Common.Entities.Member", "Member")
                        .WithMany("FilmMembers")
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeepMovie.Common.Entities.Link", b =>
                {
                    b.HasOne("DeepMovie.Common.Entities.Film", "Film")
                        .WithMany("Links")
                        .HasForeignKey("FilmID");
                });

            modelBuilder.Entity("DeepMovie.Common.Entities.Member", b =>
                {
                    b.HasOne("DeepMovie.Common.Entities.Content", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoID");
                });

            modelBuilder.Entity("DeepMovie.Common.Entities.Review", b =>
                {
                    b.HasOne("DeepMovie.Common.Entities.Film", null)
                        .WithMany("Reviews")
                        .HasForeignKey("FilmID");

                    b.HasOne("DeepMovie.Common.Entities.Content", "Image")
                        .WithMany()
                        .HasForeignKey("ImageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
